{
    "docs": [
        {
            "location": "/", 
            "text": "DotCi - Jenkins github integration, .ci.yml.\n\uf0c1\n\n\nBrings ease of build configuration of cloud ci systems like travisci and ease of runtime environment configuration of docker to jenkins.\n\n\nDocker Based Build Environments\n\uf0c1\n\n\n\n\nUse \nDocker-Compose\n for build setup.\n\n\n\n\nGithub Integration\n\uf0c1\n\n\n\n\nAutomatically sets up Github \nwebhooks\n for pull requests and github pushes when a new job is setup.\n\n\nPrivate Repo support via generated \ndeploy keys\n.\n\n\nSets \ncommit status\n during and after build run.\n\n\nJobs follow name-spacing structure of github, jobs are nested under organization folder(\nScreenshot\n)\n\n\nAuthorization\n scheme mapped to corresponding github repo permissions.\n   (\nScreenshot\n)\n\n\nChangeset is calculated  from github payload.\n\n\nBuilds for master branch get special treatment\n\n\nLastBuild\n permalink points to last build for master.\n\n\nmaster\n branch status is treated as job status( useful for dashboard/job weather tools)\n\n\nlastSuccessfulMaster\n permalink.\n\n\n\n\n\n\n\n\nNew Jenkins UI\n\uf0c1\n\n\n\n\nSee \nUI\n\n\n\n\nJob Enhancements\n\uf0c1\n\n\n\n\nCustom build history branch tabs. \n\n\nFetch builds by git sha (\njob/meow/sha?value=\nsha\n)\n\n\nFetch last build for a branch (\njob/meow?branch=\nbranch-name\n)\n\n\nScaling Jenkins.\n\n\nBacked by a mongodb database.\n\n\nStore unlimited number of builds without performance degradation.\n\n\nQuery build statistics by querying database. Job/Build data is stored in mongodb bson format.\n\n\nUser builds view (This is the default view in our jenkins installation) (\nScreenshot\n)", 
            "title": "Home"
        }, 
        {
            "location": "/#dotci-jenkins-github-integration-ciyml", 
            "text": "Brings ease of build configuration of cloud ci systems like travisci and ease of runtime environment configuration of docker to jenkins.  Docker Based Build Environments \uf0c1   Use  Docker-Compose  for build setup.   Github Integration \uf0c1   Automatically sets up Github  webhooks  for pull requests and github pushes when a new job is setup.  Private Repo support via generated  deploy keys .  Sets  commit status  during and after build run.  Jobs follow name-spacing structure of github, jobs are nested under organization folder( Screenshot )  Authorization  scheme mapped to corresponding github repo permissions.\n   ( Screenshot )  Changeset is calculated  from github payload.  Builds for master branch get special treatment  LastBuild  permalink points to last build for master.  master  branch status is treated as job status( useful for dashboard/job weather tools)  lastSuccessfulMaster  permalink.     New Jenkins UI \uf0c1   See  UI   Job Enhancements \uf0c1   Custom build history branch tabs.   Fetch builds by git sha ( job/meow/sha?value= sha )  Fetch last build for a branch ( job/meow?branch= branch-name )  Scaling Jenkins.  Backed by a mongodb database.  Store unlimited number of builds without performance degradation.  Query build statistics by querying database. Job/Build data is stored in mongodb bson format.  User builds view (This is the default view in our jenkins installation) ( Screenshot )", 
            "title": "DotCi - Jenkins github integration, .ci.yml."
        }, 
        {
            "location": "/user-guide/CreateNewJob/", 
            "text": "Create new DotCi Job\n\uf0c1\n\n\n\n\nClick new DotCi job on side-panel:\n\n\n\n\n\n\n\n\nSelect Github Org and click new job:\n\n\n\n\n\n\n\n\n(optional) Override build type on the per-job Configuration page:\n\n\n\n\n\n\n\n\n(optional) Add build tags on the per-job Configuratoin page (none by default):", 
            "title": "Create New Job"
        }, 
        {
            "location": "/user-guide/CreateNewJob/#create-new-dotci-job", 
            "text": "Click new DotCi job on side-panel:     Select Github Org and click new job:     (optional) Override build type on the per-job Configuration page:     (optional) Add build tags on the per-job Configuratoin page (none by default):", 
            "title": "Create new DotCi Job"
        }, 
        {
            "location": "/user-guide/DockerCompose/", 
            "text": "This build type uses \ndocker-compose\n to execute the build.\n\n\n.ci.yml\n Sections\n\uf0c1\n\n\ndocker-compose-file\n\uf0c1\n\n\ndocker-compose-file: \n./jenkins/docker-compose.yml\n\n\n\n\n\nSpecify an alternate compose file (default: docker-compose.yml)\n\n\nbefore\n\uf0c1\n\n\nbefore: \n./some_script \n ./another_script\n\n\n\n\n\nSpecify any commands that should be run before building the image.\n\n\nrun\n\uf0c1\n\n\nrun:\n  test:\n\n\n\n\nRuns a container defined by \ntest\n in \ndocker-compose.yml\n with its default \nCMD\n.\n\n\nrun:\n  test: 'npm test'\n\n\n\n\nRuns a container defined by \ntest\n in \ndocker-compose.yml\n with the command \nnpm test\n.\n\n\nrun:\n  test: 'rspec'\n  cuke_test: 'cucumber'\n  integration:\n\n\n\n\nParallel Run:\n\n\n\n\nA container defined by \ntest\n in \ndocker-compose.yml\n with the command\n  \nrspec\n.\n\n\nA container defined by \ncuke_test\n in \ndocker-compose.yml\n with the command\n  \ncucumber\n.\n\n\nA container defined by \nintegration\n in \ndocker-compose.yml\n with its default \nCMD\n.\n\n\n\n\nplugins\n\uf0c1\n\n\nSee \nPlugins\n\n\nnotifications\n\uf0c1\n\n\nSee \nNotifications", 
            "title": ".ci.yml reference"
        }, 
        {
            "location": "/user-guide/DockerCompose/#ciyml-sections", 
            "text": "docker-compose-file \uf0c1  docker-compose-file:  ./jenkins/docker-compose.yml   Specify an alternate compose file (default: docker-compose.yml)  before \uf0c1  before:  ./some_script   ./another_script   Specify any commands that should be run before building the image.  run \uf0c1  run:\n  test:  Runs a container defined by  test  in  docker-compose.yml  with its default  CMD .  run:\n  test: 'npm test'  Runs a container defined by  test  in  docker-compose.yml  with the command  npm test .  run:\n  test: 'rspec'\n  cuke_test: 'cucumber'\n  integration:  Parallel Run:   A container defined by  test  in  docker-compose.yml  with the command\n   rspec .  A container defined by  cuke_test  in  docker-compose.yml  with the command\n   cucumber .  A container defined by  integration  in  docker-compose.yml  with its default  CMD .   plugins \uf0c1  See  Plugins  notifications \uf0c1  See  Notifications", 
            "title": ".ci.yml Sections"
        }, 
        {
            "location": "/user-guide/Plugins/", 
            "text": "Plugins\n\uf0c1\n\n\nThese are common to the built-in Build Types; while its\nsuggested that any new Build Types utilize them, it is not enforced\nthrough the DotCi Plugin Framework. Any Build Type that respects the\n\nplugins\n keys can use these:\n\n\n\n\nartifacts\n\n\ncheckstyle\n\n\ncobertura\n\n\ndownstream_job\n\n\nfindbugs\n\n\noutput_files\n\n\ntest_output\n\n\n\n\nartifacts\n\uf0c1\n\n\n---\nplugins:\n  - artifacts: file1.txt,dist/file2.*\n\n\n\n\nThis plugin configures Jenkin's default artifact archiver; it is a\ncomma-separated list of matchers to archive. \nNOTE: the artifacts must\nexist, there is no exposure of the Advanced options to ignore missing\nartifacts.\n\n\nSee \nant fileset\n for\nmatcher specifications.\n\n\nNOTE: Configure your project's Build Environment: \"Delete workspace before build starts\" to avoid accumulative artifacts.\n\n\ncheckstyle\n\uf0c1\n\n\n---\nplugins:\n  - checkstyle\n\n\n\n\nFIXME: Describe file at \ntarget/checkstyle-result.xml\n or move out\nsince not in base install\n\n\ncobertura\n\uf0c1\n\n\n---\nplugins:\n  - cobertura\n\n\n\n\nFIXME: Describe file at \ntarget/site/cobertura/coverage.xml\n or move\nout since not in base install\n\n\ndownstream_job\n\uf0c1\n\n\n---\nplugins:\n  - downstream_job:\n      on_result: \nSUCCESS|UNSTABLE|FAILURE|NOT_BUILT|ABORTED\n # From hudson.model.Result static types\n      foobar:\n        k1: v1\n        k2: v2\n\n\n\n\nThis triggers the job by the name of \nfoobar\n when the current job's\nresult matches the value of \non_result\n, which comes from\n\nhudson.model.Result\n.\nThe hash that is the key \nfoobar\n's value are passed into the downstream\njob as its parameterized values.\n\n\nfindbugs\n\uf0c1\n\n\n---\nplugins:\n  - findbugs\n\n\n\n\nFIXME: Describe file at \ntarget/findbugs.xml\n or move out since not in\nbase install\n\n\noutput_files\n\uf0c1\n\n\n---\nplugins:\n  - output_files:\n    - foo.txt\n    - bar.txt\n\n\n\n\nThis allows copying specific output files for further plugin process.\n\n\ntest_output\n\uf0c1\n\n\n---\nplugins:\n  - test_output:\n      format: tap | junit\n\n\n\n\nFIXME: Describe or move out since not in base install", 
            "title": ".ci.yml Plugins Reference"
        }, 
        {
            "location": "/user-guide/Plugins/#plugins", 
            "text": "These are common to the built-in Build Types; while its\nsuggested that any new Build Types utilize them, it is not enforced\nthrough the DotCi Plugin Framework. Any Build Type that respects the plugins  keys can use these:   artifacts  checkstyle  cobertura  downstream_job  findbugs  output_files  test_output   artifacts \uf0c1  ---\nplugins:\n  - artifacts: file1.txt,dist/file2.*  This plugin configures Jenkin's default artifact archiver; it is a\ncomma-separated list of matchers to archive.  NOTE: the artifacts must\nexist, there is no exposure of the Advanced options to ignore missing\nartifacts.  See  ant fileset  for\nmatcher specifications.  NOTE: Configure your project's Build Environment: \"Delete workspace before build starts\" to avoid accumulative artifacts.  checkstyle \uf0c1  ---\nplugins:\n  - checkstyle  FIXME: Describe file at  target/checkstyle-result.xml  or move out\nsince not in base install  cobertura \uf0c1  ---\nplugins:\n  - cobertura  FIXME: Describe file at  target/site/cobertura/coverage.xml  or move\nout since not in base install  downstream_job \uf0c1  ---\nplugins:\n  - downstream_job:\n      on_result:  SUCCESS|UNSTABLE|FAILURE|NOT_BUILT|ABORTED  # From hudson.model.Result static types\n      foobar:\n        k1: v1\n        k2: v2  This triggers the job by the name of  foobar  when the current job's\nresult matches the value of  on_result , which comes from hudson.model.Result .\nThe hash that is the key  foobar 's value are passed into the downstream\njob as its parameterized values.  findbugs \uf0c1  ---\nplugins:\n  - findbugs  FIXME: Describe file at  target/findbugs.xml  or move out since not in\nbase install  output_files \uf0c1  ---\nplugins:\n  - output_files:\n    - foo.txt\n    - bar.txt  This allows copying specific output files for further plugin process.  test_output \uf0c1  ---\nplugins:\n  - test_output:\n      format: tap | junit  FIXME: Describe or move out since not in base install", 
            "title": "Plugins"
        }, 
        {
            "location": "/user-guide/Notifications/", 
            "text": "Built-In Notifications\n\uf0c1\n\n\nThese are common to the built-in Build Types; while its\nsuggested that any new Build Types utilize them, it is not enforced\nthrough the DotCi Notification Framework. Any Build Type that respects the\n\nnotifications\n key can use these:\n\n\n\n\ncampfire\n\n\nemail\n\n\nhipchat\n\n\npusher_email\n\n\n\n\ncampfire\n\uf0c1\n\n\n---\nnotifications:\n  - campfire:\n    - room1\n    - room2\n\n\n\n\nFIXME: Describe or move out since not in base install\n\n\nemail\n\uf0c1\n\n\n---\nnotifications:\n  - email:\n    - email1@example.com\n    - email2@example.com\n\n\n\n\nSends a notification on failure or recovery (success after failure) to\nthe single email or array of emails listed.\n\n\nhipchat\n\uf0c1\n\n\n---\nnotifications:\n  - hipchat:\n    - room1\n    - room2\n\n\n\n\nFIXME: Describe or move out since not in base install\n\n\npusher_email\n\uf0c1\n\n\n---\nnotifications:\n  - pusher_email\n\n\n\n\nSends a notification on failure or recovery (success after failure) to\nthe person who caused the build to occur.", 
            "title": ".ci.yml Notifications Reference"
        }, 
        {
            "location": "/user-guide/Notifications/#built-in-notifications", 
            "text": "These are common to the built-in Build Types; while its\nsuggested that any new Build Types utilize them, it is not enforced\nthrough the DotCi Notification Framework. Any Build Type that respects the notifications  key can use these:   campfire  email  hipchat  pusher_email   campfire \uf0c1  ---\nnotifications:\n  - campfire:\n    - room1\n    - room2  FIXME: Describe or move out since not in base install  email \uf0c1  ---\nnotifications:\n  - email:\n    - email1@example.com\n    - email2@example.com  Sends a notification on failure or recovery (success after failure) to\nthe single email or array of emails listed.  hipchat \uf0c1  ---\nnotifications:\n  - hipchat:\n    - room1\n    - room2  FIXME: Describe or move out since not in base install  pusher_email \uf0c1  ---\nnotifications:\n  - pusher_email  Sends a notification on failure or recovery (success after failure) to\nthe person who caused the build to occur.", 
            "title": "Built-In Notifications"
        }, 
        {
            "location": "/user-guide/Templating/", 
            "text": "Templating .ci.yml\n\uf0c1\n\n\nEnvironment Variables\n\uf0c1\n\n\nIn addition to \nJenkins build\nvariables\n,\nDotCi provides the following global variables:\n\n\n\n\nDOTCI_BRANCH\n -  current branch\n\n\nDOTCI\n - always true\n\n\nCI\n - always true\n\n\nDOTCI_SHA\n - current sha being built\n\n\nGIT_URL\n - git url\n\n\nDOTCI_PUSHER\n - github username whose git push triggred this build\n\n\nDOTCI_PULL_REQUEST\n - pull request number being built\n\n\n\n\nGroovy templating\n\uf0c1\n\n\n.ci.yml\n acts as a \ngroovy\ntemplate\n which is run\nthrough a groovy preprocessor before build starts.\n\n\nExamples\n\uf0c1\n\n\nSend extra notification to yourself for a build you started:\n\n\nnotifications:\n  \n% if (DOTCI_PUSHER == 'joe') { %\n\n  - sms: 1234344453\n  \n% } %\n\n\n\n\n\nRun certain commands after tests when \nDOTCI_BRANCH\n is \nproduction\n:\n\n\nbuild:\n   run: rake spec\n   #run integration tests only on production branch\n   \n% if (DOTCI_BRANCH == 'production') { %\n\n   after: rake integration\n   \n%} %\n\n\n\n\n\nNotify hipchat room \nDevOps\n when \nDOTCI_BRANCH\n is \nmaster\n:\n\n\nnotifications:\n  \n% if (DOTCI_BRANCH == 'master') { %\n\n  - hipchat: 'DevOps'\n  \n%}%\n\n\n\n\n\nPass \nDOTCI_BRANCH\n as a parameter to webhook:\n\n\nplugins:\n  - webhook:\n      url: http://example.com/hook\n      params:\n        branch: ${DOTCI_BRANCH}\n\n\n\n\nArtifact files when \nDOTCI_BRANCH\n is \nmaster\n:\n\n\nbuild:\n  \n% if( DOTCI_BRANCH != 'master') {%\n\n  - artifacts: 'packages/**/*.war'\n  \n%}%", 
            "title": ".ci.yml Templating"
        }, 
        {
            "location": "/user-guide/Templating/#templating-ciyml", 
            "text": "", 
            "title": "Templating .ci.yml"
        }, 
        {
            "location": "/user-guide/Templating/#environment-variables", 
            "text": "In addition to  Jenkins build\nvariables ,\nDotCi provides the following global variables:   DOTCI_BRANCH  -  current branch  DOTCI  - always true  CI  - always true  DOTCI_SHA  - current sha being built  GIT_URL  - git url  DOTCI_PUSHER  - github username whose git push triggred this build  DOTCI_PULL_REQUEST  - pull request number being built", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/user-guide/Templating/#groovy-templating", 
            "text": ".ci.yml  acts as a  groovy\ntemplate  which is run\nthrough a groovy preprocessor before build starts.  Examples \uf0c1  Send extra notification to yourself for a build you started:  notifications:\n   % if (DOTCI_PUSHER == 'joe') { % \n  - sms: 1234344453\n   % } %   Run certain commands after tests when  DOTCI_BRANCH  is  production :  build:\n   run: rake spec\n   #run integration tests only on production branch\n    % if (DOTCI_BRANCH == 'production') { % \n   after: rake integration\n    %} %   Notify hipchat room  DevOps  when  DOTCI_BRANCH  is  master :  notifications:\n   % if (DOTCI_BRANCH == 'master') { % \n  - hipchat: 'DevOps'\n   %}%   Pass  DOTCI_BRANCH  as a parameter to webhook:  plugins:\n  - webhook:\n      url: http://example.com/hook\n      params:\n        branch: ${DOTCI_BRANCH}  Artifact files when  DOTCI_BRANCH  is  master :  build:\n   % if( DOTCI_BRANCH != 'master') {% \n  - artifacts: 'packages/**/*.war'\n   %}%", 
            "title": "Groovy templating"
        }, 
        {
            "location": "/user-guide/UI/", 
            "text": "UI Guide\n\uf0c1\n\n\n Coming soon\n\n\nBuild Url shortcuts\n\uf0c1\n\n\n\n\nFetch builds by git sha ( \njob/meow/23/sha?value=\nsha\n)\n\n\nOr branch specific permalinks (\nlastSuccessfulMaster\n) .", 
            "title": "UI Reference"
        }, 
        {
            "location": "/installation/Installation/", 
            "text": "Pre-Requisites\n\uf0c1\n\n\nMongo DB\n\uf0c1\n\n\nInstall \nmongodb\n in a location accessible to your Jenkins instance.\n\n\nGithub Application\n\uf0c1\n\n\nRegister an \nOAuth Application\n with GitHub\nto generate \nClient ID\n and \nClient Secret\n. \nThe \nAuthorization callback URL\n needs to be \nhttp://\nYOUR-JENKINS-URL\n/dotci/finishLogin\n\n\nConfigure Master\n\uf0c1\n\n\n\n\nGoto \nManage Jenkins\n \n \nConfigure Plugins\n and install \nDotCi\n\n   plugin.\n\n\nGoto \nManage Jenkins\n \n \nConfigure System\n and fill out required information under DotCi Configuration:\n\n\n\n\n\n\nDocker Slave\n\uf0c1\n\n\nA slave that can build for docker build types, i.e.  \nDocker Compose\n, must have the\nfollowing installed in addition to required Jenkins software:\n\n\n\n\ndocker\n\n\ndocker-compose\n\n\n\n\nMongoDB indexes\n\uf0c1\n\n\n\n\nBuilds for project\n\n\n\n\ndb.run.ensureIndex( {projectId: 1 } )\n\n\n\n\n\n\nBuilds by number\n\n\n\n\ndb.run.ensureIndex( {number: 1 } )\n\n\n\n\n\n\nBuilds by Result and Project\n\n\n\n\ndb.run.ensureIndex( {projectId: 1, result: 1 } )\n\n\n\n\n\n\nBuilds for user\n\n\n\n\ndb.run.ensureIndex( {className: 1, 'actions.causes.user': 1, 'actions.causes.pusher': 1 } )\n\n\n\n\n\n\nBuilds capped for 30 days\n\n\n\n\ndb.run.ensureIndex( { \ntimestamp\n: 1 }, { expireAfterSeconds: 2592000 } )", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/Installation/#pre-requisites", 
            "text": "Mongo DB \uf0c1  Install  mongodb  in a location accessible to your Jenkins instance.  Github Application \uf0c1  Register an  OAuth Application  with GitHub\nto generate  Client ID  and  Client Secret . \nThe  Authorization callback URL  needs to be  http:// YOUR-JENKINS-URL /dotci/finishLogin", 
            "title": "Pre-Requisites"
        }, 
        {
            "location": "/installation/Installation/#configure-master", 
            "text": "Goto  Manage Jenkins     Configure Plugins  and install  DotCi \n   plugin.  Goto  Manage Jenkins     Configure System  and fill out required information under DotCi Configuration:", 
            "title": "Configure Master"
        }, 
        {
            "location": "/installation/Installation/#docker-slave", 
            "text": "A slave that can build for docker build types, i.e.   Docker Compose , must have the\nfollowing installed in addition to required Jenkins software:   docker  docker-compose", 
            "title": "Docker Slave"
        }, 
        {
            "location": "/installation/Installation/#mongodb-indexes", 
            "text": "Builds for project   db.run.ensureIndex( {projectId: 1 } )   Builds by number   db.run.ensureIndex( {number: 1 } )   Builds by Result and Project   db.run.ensureIndex( {projectId: 1, result: 1 } )   Builds for user   db.run.ensureIndex( {className: 1, 'actions.causes.user': 1, 'actions.causes.pusher': 1 } )   Builds capped for 30 days   db.run.ensureIndex( {  timestamp : 1 }, { expireAfterSeconds: 2592000 } )", 
            "title": "MongoDB indexes"
        }, 
        {
            "location": "/development/DevelopmentSetup/", 
            "text": "Setting up local development environment\n\uf0c1\n\n\n\n\nRegister an \noauth application with github\n with the following values\n\n\nHomepage URL - http://127.0.0.1:8080\n\n\nAuthorization callback URL - http://127.0.0.1:8080/jenkins/securityRealm/finishLogin\n\n\nInstall pre-requisites:\n\n\nNon-docker:\n\n\nInstall mongodb\n\n\n\n\n\n\nDocker:\n\n\nInstall docker: https://docs.docker.com/mac/started/\n\n\nInstall docker-compose: https://docs.docker.com/compose/install/\n\n\nRun build \ndocker-compose build\n\n\n\n\n\n\nPrepare assets:\n\n\nNon-docker: \nnpm run build\n\n\nDocker: \ndocker-compose run --rm plugin npm run build\n\n\nRun plugin\n\n\nNon-docker: \nmvn hpi:run\n\n\nDocker: \ndocker-compose up plugin\n\n\nGo to \nManage Jenkins\n \n \nConfigure Global Security\n\n\nUnder \nSecurity Realm\n select \nGithub Authentication Plugin\n and fill out required oauth credentials.\n\n\nGo to \nManage Jenkins\n \nConfigure System\n\n\nFill out required information under DotCi Configuration\n\n\nOptionally add a noop \ninstall_packages\n in your \n.bash_profile\n:\n  \nbash\n  install_packages(){\n    echo \"installing packages\"\n  }", 
            "title": "Development Setup"
        }, 
        {
            "location": "/development/DevelopmentSetup/#setting-up-local-development-environment", 
            "text": "Register an  oauth application with github  with the following values  Homepage URL - http://127.0.0.1:8080  Authorization callback URL - http://127.0.0.1:8080/jenkins/securityRealm/finishLogin  Install pre-requisites:  Non-docker:  Install mongodb    Docker:  Install docker: https://docs.docker.com/mac/started/  Install docker-compose: https://docs.docker.com/compose/install/  Run build  docker-compose build    Prepare assets:  Non-docker:  npm run build  Docker:  docker-compose run --rm plugin npm run build  Run plugin  Non-docker:  mvn hpi:run  Docker:  docker-compose up plugin  Go to  Manage Jenkins     Configure Global Security  Under  Security Realm  select  Github Authentication Plugin  and fill out required oauth credentials.  Go to  Manage Jenkins   Configure System  Fill out required information under DotCi Configuration  Optionally add a noop  install_packages  in your  .bash_profile :\n   bash\n  install_packages(){\n    echo \"installing packages\"\n  }", 
            "title": "Setting up local development environment"
        }, 
        {
            "location": "/development/Extending/", 
            "text": "DotCi defines three new [extension points] ( https://wiki.jenkins-ci.org/display/JENKINS/Extension+points)\n\n\nAdd \nnew build type\n, this would be populated in the build type dropdown.\n\uf0c1\n\n\nEg:\n\n\n\n@Extension\npublic class DockerImageBuild extends BuildType implements SubBuildRunner {\n   @Override\n    public String getDescription() {\n        return \nDocker Build\n;\n    }\n\n    @Override\n    public Result runBuild(DynamicBuild build, BuildExecutionContext buildExecutionContext, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n    }\n}\n\n\n\n\nAdd \nnew notifications\n is done by extending \nPostBuildNotifier\n\uf0c1\n\n\nEg: Adding a hipchat notifier in notifications section of \n.ci.yml\n\n\n  @Extension\npublic class HipchatNotifier extends PostBuildNotifier {\n    public HipchatNotifier() {\n        super(\nhipchat\n);\n    }\n    @Override\n    public boolean notify(DynamicBuild build, BuildListener listener) {\n      //notify hipchat room\n    }\n\n\n\n\nAdding a \nnew plugin\n for use through plugins section of \n.ci.yml\n is done by extending \nDotCiPluginAdapter\n\uf0c1\n\n\nEg: Adding cobertura to plugins section\n\n\n@Extension\npublic class CoberturaPluginAdapter extends DotCiPluginAdapter {\n\n    public CoberturaPluginAdapter() {\n        super(\ncobertura\n, \ntarget/site/cobertura/coverage.xml\n);\n    }\n\n    @Override\n    public boolean perform(DynamicBuild dynamicBuild, Launcher launcher, BuildListener listener) {\n        CoberturaPublisher publisher = new CoberturaPublisher(pluginInputFiles, false, false, false, false, false, false, false, null, 0);\n\n        try {\n            return publisher.perform(((AbstractBuild) dynamicBuild), launcher, listener);\n        } catch (Exception e) {\n            e.printStackTrace(listener.getLogger());\n            return false;\n        }\n    }\n\n}\n\n\n\n\nLICENSE\n\uf0c1\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2014, Groupon, Inc.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.", 
            "title": "Extending DotCi"
        }
    ]
}