{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Home"
        }, 
        {
            "location": "/user-guide/CreateNewJob/", 
            "text": "Create new DotCi Job\n\uf0c1\n\n\n(1)\n Click the \nNew DotCi Job\n button on the Jenkins side-panel:\n\n\n\n\n(2)\n Select the tab for your project's Github Organization and click the \n+\n button for the project. This will install the Webhook into your Github project's settings:\n\n\n\n\n(3)\n (optional) Override the default build type on the per-job Configuration page:\n\n\n\n\n(4)\n (optional) Add build tags on the per-job Configuration page (none by default):", 
            "title": "Create New Job"
        }, 
        {
            "location": "/user-guide/CreateNewJob/#create-new-dotci-job", 
            "text": "(1)  Click the  New DotCi Job  button on the Jenkins side-panel:   (2)  Select the tab for your project's Github Organization and click the  +  button for the project. This will install the Webhook into your Github project's settings:   (3)  (optional) Override the default build type on the per-job Configuration page:   (4)  (optional) Add build tags on the per-job Configuration page (none by default):", 
            "title": "Create new DotCi Job"
        }, 
        {
            "location": "/user-guide/DockerCompose/", 
            "text": "This build type uses \ndocker-compose\n to execute the build.\n\n\n.ci.yml\n Sections\n\uf0c1\n\n\ndocker-compose-file\n (Optional)\n\uf0c1\n\n\ndocker-compose-file: \n./jenkins/docker-compose.yml\n\n\n\n\n\nSpecify an alternate compose file (default: docker-compose.yml)\n\n\nbefore_run\n (Optional)\n\uf0c1\n\n\nbefore_run: \n./some_script \n ./another_script\n\n\n\n\n\nSpecify commands that should be run before the run commands. These commands will execute once. \n\n\nbefore_each\n (Optional)\n\uf0c1\n\n\nbefore_each: \n./some_script \n ./another_script\n\n\n\n\n\nSpecify commands that should be run before each run sub-command. \n\n\nafter_each\n (Optional)\n\uf0c1\n\n\nafter_each: \n./some_script \n ./another_script\n\n\n\n\n\nSpecify commands that should be run after each run sub-command. These will run on success and failure. \n\n\nrun\n (Required)\n\uf0c1\n\n\nrun:\n  test:\n\n\n\n\nRuns a container defined by \ntest\n in \ndocker-compose.yml\n with its default \nCMD\n.\n\n\nrun:\n  test: 'npm test'\n\n\n\n\nRuns a container defined by \ntest\n in \ndocker-compose.yml\n with the command \nnpm test\n.\n\n\nrun:\n  test: 'rspec'\n  cuke_test: 'cucumber'\n  integration:\n\n\n\n\nParallel Run:\n\n\n\n\nA container defined by \ntest\n in \ndocker-compose.yml\n with the command\n  \nrspec\n.\n\n\nA container defined by \ncuke_test\n in \ndocker-compose.yml\n with the command\n  \ncucumber\n.\n\n\nA container defined by \nintegration\n in \ndocker-compose.yml\n with its default \nCMD\n.\n\n\n\n\nskip\n (Optional)\n\uf0c1\n\n\nskip: true\n\n\n\n\nSkip build. \nThis is useful when combined with templating. Eg, \n\n\n#only build master or pull request.\n\n% if (DOTCI_BRANCH != 'master' \n !DOTCI_PULL_REQUEST ) { %\n\nskip:\n\n% } %\n\nrun:\n  ci: \n\n\n\n\nplugins\n\uf0c1\n\n\nSee \nPlugins\n\n\nnotifications\n\uf0c1\n\n\nSee \nNotifications", 
            "title": ".ci.yml reference"
        }, 
        {
            "location": "/user-guide/DockerCompose/#ciyml-sections", 
            "text": "docker-compose-file  (Optional) \uf0c1  docker-compose-file:  ./jenkins/docker-compose.yml   Specify an alternate compose file (default: docker-compose.yml)  before_run  (Optional) \uf0c1  before_run:  ./some_script   ./another_script   Specify commands that should be run before the run commands. These commands will execute once.   before_each  (Optional) \uf0c1  before_each:  ./some_script   ./another_script   Specify commands that should be run before each run sub-command.   after_each  (Optional) \uf0c1  after_each:  ./some_script   ./another_script   Specify commands that should be run after each run sub-command. These will run on success and failure.   run  (Required) \uf0c1  run:\n  test:  Runs a container defined by  test  in  docker-compose.yml  with its default  CMD .  run:\n  test: 'npm test'  Runs a container defined by  test  in  docker-compose.yml  with the command  npm test .  run:\n  test: 'rspec'\n  cuke_test: 'cucumber'\n  integration:  Parallel Run:   A container defined by  test  in  docker-compose.yml  with the command\n   rspec .  A container defined by  cuke_test  in  docker-compose.yml  with the command\n   cucumber .  A container defined by  integration  in  docker-compose.yml  with its default  CMD .   skip  (Optional) \uf0c1  skip: true  Skip build. \nThis is useful when combined with templating. Eg,   #only build master or pull request. % if (DOTCI_BRANCH != 'master'   !DOTCI_PULL_REQUEST ) { % \nskip: % } % \nrun:\n  ci:   plugins \uf0c1  See  Plugins  notifications \uf0c1  See  Notifications", 
            "title": ".ci.yml Sections"
        }, 
        {
            "location": "/user-guide/Plugins/", 
            "text": "Jenkins  Plugins\n\uf0c1\n\n\nAny \nBuilder\n and \n  \nPublisher\n can be specified with ClassName and setter options\n\n\neg: \n\n\n    plugins:\n      - CheckStylePublisher: # https://github.com/jenkinsci/checkstyle-plugin/blob/master/src/main/java/hudson/plugins/checkstyle/CheckStylePublisher.java\n           pattern: 'checkstyle/*.xml' #https://github.com/jenkinsci/checkstyle-plugin/blob/master/src/main/java/hudson/plugins/checkstyle/CheckStylePublisher.java#L65\n\n\n\n\nBuilt-In Plugins\n\uf0c1\n\n\nPlugins that are bundled with DotCi.\n\n\ndownstream_job\n\uf0c1\n\n\nplugins:\n  - downstream_job:\n      on_result: \nSUCCESS|UNSTABLE|FAILURE|NOT_BUILT|ABORTED\n # From hudson.model.Result static types\n      groupon/DotCi: # Repo\n        k1: 'v1' #param k1\n        k2: 'v2' #param k2\n\n\n\n\nThis triggers the job for the repo \ngroupon/DotCi\n when the current job's\nresult matches the value of \non_result\n, which comes from\n\nhudson.model.Result\n.\nThe hash that is the key \ngroupon/DotCi\n's value are passed into the downstream job as its parameterized values ( these don't necessarily have to be predefined in the target job).\n\n\nStarter-Pack Plugins\n\uf0c1\n\n\nThere are optional set of plugins that are available if you install \nDotCi-Plugins-Starter-Pack\n from update center.\n\n\nreview_line_comments\n\uf0c1\n\n\nplugins:\n  - review_line_comments\n\n\n\n\nCollects output from \nAnalysis Collector Plugin\n and Cobertura Plugin and converts them into line comments on github Pull Requests.", 
            "title": ".ci.yml Plugins Reference"
        }, 
        {
            "location": "/user-guide/Plugins/#starter-pack-plugins", 
            "text": "There are optional set of plugins that are available if you install  DotCi-Plugins-Starter-Pack  from update center.  review_line_comments \uf0c1  plugins:\n  - review_line_comments  Collects output from  Analysis Collector Plugin  and Cobertura Plugin and converts them into line comments on github Pull Requests.", 
            "title": "Starter-Pack Plugins"
        }, 
        {
            "location": "/user-guide/Notifications/", 
            "text": "Built-In Notifications\n\uf0c1\n\n\nAll notifications default to notifying only when there is a failure or recovery( for that particualar branch).\n\n\nCore Notifications that are bundled with DotCi.\n\n\nemail\n\uf0c1\n\n\n---\nnotifications:\n  - email:\n    - email1@example.com\n    - email2@example.com\n\n\n\n\nStarter-Pack Notifications\n\uf0c1\n\n\nThere are optional set of notifications that are available if you install \nDotCi-Plugins-Starter-Pack\n from update center.\n\n\ncampfire\n\uf0c1\n\n\n---\nnotifications:\n  - campfire:\n    - room1\n    - room2\n\n\n\n\nhipchat\n\uf0c1\n\n\n( Token for hipchat notifications needs to be configured under global jenkins settings, look for \nDotCi Hipchat Configuration\n)\n\n\n---\nnotifications:\n  - hipchat:\n    - room1\n    - room2\n#or pass in extra options\n  - hipchat: \n    room: test\n    notify_on:  FAILURE_AND_RECOVERY| ALL\n    message: optional message", 
            "title": ".ci.yml Notifications Reference"
        }, 
        {
            "location": "/user-guide/Notifications/#built-in-notifications", 
            "text": "All notifications default to notifying only when there is a failure or recovery( for that particualar branch).  Core Notifications that are bundled with DotCi.  email \uf0c1  ---\nnotifications:\n  - email:\n    - email1@example.com\n    - email2@example.com", 
            "title": "Built-In Notifications"
        }, 
        {
            "location": "/user-guide/Notifications/#starter-pack-notifications", 
            "text": "There are optional set of notifications that are available if you install  DotCi-Plugins-Starter-Pack  from update center.  campfire \uf0c1  ---\nnotifications:\n  - campfire:\n    - room1\n    - room2  hipchat \uf0c1  ( Token for hipchat notifications needs to be configured under global jenkins settings, look for  DotCi Hipchat Configuration )  ---\nnotifications:\n  - hipchat:\n    - room1\n    - room2\n#or pass in extra options\n  - hipchat: \n    room: test\n    notify_on:  FAILURE_AND_RECOVERY| ALL\n    message: optional message", 
            "title": "Starter-Pack Notifications"
        }, 
        {
            "location": "/user-guide/Templating/", 
            "text": "Templating .ci.yml\n\uf0c1\n\n\nEnvironment Variables\n\uf0c1\n\n\nIn addition to \nJenkins build\nvariables\n,\nDotCi provides the following global variables:\n\n\n\n\nDOTCI_BRANCH\n -  current branch\n\n\nDOTCI\n - always true\n\n\nCI\n - always true\n\n\nDOTCI_SHA\n - current sha being built\n\n\nGIT_URL\n - git url\n\n\nDOTCI_PUSHER\n - github username whose git push triggred this build\n\n\nDOTCI_PULL_REQUEST\n - pull request number being built\n\n\nDOTCI_PULL_REQUEST_SOURCE_BRANCH\n - the pull request branch\n\n\nDOTCI_PULL_REQUEST_TARGET_BRANCH\n - the branch the pull request is targeting\n\n\n\n\nGroovy templating\n\uf0c1\n\n\n.ci.yml\n acts as a \ngroovy\ntemplate\n which is run\nthrough a groovy preprocessor before build starts.\n\n\nExamples\n\uf0c1\n\n\nSend extra notification to yourself for a build you started:\n\n\nnotifications:\n  \n% if (DOTCI_PUSHER == 'joe') { %\n\n  - sms: 1234344453\n  \n% } %\n\n\n\n\n\nRun certain commands after tests when \nDOTCI_BRANCH\n is \nproduction\n:\n\n\nbuild:\n   run: rake spec\n   #run integration tests only on production branch\n   \n% if (DOTCI_BRANCH == 'production') { %\n\n   after: rake integration\n   \n%} %\n\n\n\n\n\nNotify hipchat room \nDevOps\n when \nDOTCI_BRANCH\n is \nmaster\n:\n\n\nnotifications:\n  \n% if (DOTCI_BRANCH == 'master') { %\n\n  - hipchat: 'DevOps'\n  \n%}%\n\n\n\n\n\nPass \nDOTCI_BRANCH\n as a parameter to webhook:\n\n\nplugins:\n  - webhook:\n      url: http://example.com/hook\n      params:\n        branch: ${DOTCI_BRANCH}\n\n\n\n\nArtifact files when \nDOTCI_BRANCH\n is \nmaster\n:\n\n\nbuild:\n  \n% if( DOTCI_BRANCH != 'master') {%\n\n  - artifacts: 'packages/**/*.war'\n  \n%}%", 
            "title": ".ci.yml Templating"
        }, 
        {
            "location": "/user-guide/Templating/#templating-ciyml", 
            "text": "", 
            "title": "Templating .ci.yml"
        }, 
        {
            "location": "/user-guide/Templating/#environment-variables", 
            "text": "In addition to  Jenkins build\nvariables ,\nDotCi provides the following global variables:   DOTCI_BRANCH  -  current branch  DOTCI  - always true  CI  - always true  DOTCI_SHA  - current sha being built  GIT_URL  - git url  DOTCI_PUSHER  - github username whose git push triggred this build  DOTCI_PULL_REQUEST  - pull request number being built  DOTCI_PULL_REQUEST_SOURCE_BRANCH  - the pull request branch  DOTCI_PULL_REQUEST_TARGET_BRANCH  - the branch the pull request is targeting", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/user-guide/Templating/#groovy-templating", 
            "text": ".ci.yml  acts as a  groovy\ntemplate  which is run\nthrough a groovy preprocessor before build starts.  Examples \uf0c1  Send extra notification to yourself for a build you started:  notifications:\n   % if (DOTCI_PUSHER == 'joe') { % \n  - sms: 1234344453\n   % } %   Run certain commands after tests when  DOTCI_BRANCH  is  production :  build:\n   run: rake spec\n   #run integration tests only on production branch\n    % if (DOTCI_BRANCH == 'production') { % \n   after: rake integration\n    %} %   Notify hipchat room  DevOps  when  DOTCI_BRANCH  is  master :  notifications:\n   % if (DOTCI_BRANCH == 'master') { % \n  - hipchat: 'DevOps'\n   %}%   Pass  DOTCI_BRANCH  as a parameter to webhook:  plugins:\n  - webhook:\n      url: http://example.com/hook\n      params:\n        branch: ${DOTCI_BRANCH}  Artifact files when  DOTCI_BRANCH  is  master :  build:\n   % if( DOTCI_BRANCH != 'master') {% \n  - artifacts: 'packages/**/*.war'\n   %}%", 
            "title": "Groovy templating"
        }, 
        {
            "location": "/user-guide/Examples/", 
            "text": ".ci.yml Example\n\uf0c1\n\n\n\n   before: \ngit submodule init\n #optional\n   run: \n     unit: \n     integration: \nrake integration\n\n   plugins: \n      - CheckStylePublisher:   \n          pattern: 'checkstyle/*.xml'\n\n\n\n\nProtect a branch to ensure all commits go through CI before getting into master.\n\uf0c1\n\n\n\n\nProtect a branch to ensure all commits go through Pull Request Process.\n\uf0c1", 
            "title": "Examples"
        }, 
        {
            "location": "/user-guide/Examples/#ciyml-example", 
            "text": "before:  git submodule init  #optional\n   run: \n     unit: \n     integration:  rake integration \n   plugins: \n      - CheckStylePublisher:   \n          pattern: 'checkstyle/*.xml'", 
            "title": ".ci.yml Example"
        }, 
        {
            "location": "/user-guide/Examples/#protect-a-branch-to-ensure-all-commits-go-through-ci-before-getting-into-master", 
            "text": "", 
            "title": "Protect a branch to ensure all commits go through CI before getting into master."
        }, 
        {
            "location": "/user-guide/Examples/#protect-a-branch-to-ensure-all-commits-go-through-pull-request-process", 
            "text": "", 
            "title": "Protect a branch to ensure all commits go through Pull Request Process."
        }, 
        {
            "location": "/user-guide/CLI/", 
            "text": "Cli guide\n\uf0c1\n\n\nInstallation\n\uf0c1\n\n\n  npm install -g dotci\n\n\n\n\nUser Guide\n\uf0c1\n\n\n  dotci -s http://localhost:8080/jenkins --repo suryagaddipati/DotCi ##repo defaults to current if not specified\n\n\n\n\nBuild History\n\uf0c1\n\n\n\n\nConsole View\n\uf0c1", 
            "title": "cli"
        }, 
        {
            "location": "/user-guide/CLI/#installation", 
            "text": "npm install -g dotci", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/CLI/#user-guide", 
            "text": "dotci -s http://localhost:8080/jenkins --repo suryagaddipati/DotCi ##repo defaults to current if not specified", 
            "title": "User Guide"
        }, 
        {
            "location": "/user-guide/CLI/#build-history", 
            "text": "", 
            "title": "Build History"
        }, 
        {
            "location": "/user-guide/CLI/#console-view", 
            "text": "", 
            "title": "Console View"
        }, 
        {
            "location": "/user-guide/UI/", 
            "text": "UI Guide\n\uf0c1\n\n\n Coming soon\n\n\nBuild URL shortcuts\n\uf0c1\n\n\n\n\nFetch builds by git SHA (\njob/meow/23/sha?value=\nsha\n)\n\n\nOr branch-specific permalinks (\nlastSuccessfulMaster\n) .", 
            "title": "UI Reference"
        }, 
        {
            "location": "/installation/Installation/", 
            "text": "Pre-Requisites\n\uf0c1\n\n\nMongo DB\n\uf0c1\n\n\nInstall \nmongodb\n in a location accessible to your Jenkins instance.\n\n\nGithub Application\n\uf0c1\n\n\nRegister an \nOAuth Application\n with GitHub\nto generate \nClient ID\n and \nClient Secret\n. \nThe \nAuthorization callback URL\n needs to be \nhttp://\nYOUR-JENKINS-URL\n/dotci/finishLogin\n\n\nConfigure Master\n\uf0c1\n\n\n\n\nGo to \nManage Jenkins\n \n \nConfigure Plugins\n and install \nDotCi\n\n   plugin.\n\n\nGo to \nManage Jenkins\n \n \nConfigure System\n and fill out required information under DotCi Configuration:\n\n\n\n\n\n\nDocker Slave\n\uf0c1\n\n\nA slave that can build for docker build types, i.e.  \nDocker Compose\n, must have the\nfollowing installed in addition to required Jenkins software:\n\n\n\n\ndocker\n\n\ndocker-compose\n\n\n\n\nMongoDB indexes\n\uf0c1\n\n\n\n\nBuilds for project\n\n\n\n\ndb.run.ensureIndex( {projectId: 1 } )\n\n\n\n\n\n\nBuilds by number\n\n\n\n\ndb.run.ensureIndex( {number: 1 } )\n\n\n\n\n\n\nBuilds by Result and Project\n\n\n\n\ndb.run.ensureIndex( {projectId: 1, result: 1 } )\n\n\n\n\n\n\nBuilds for user\n\n\n\n\ndb.run.ensureIndex( {className: 1, 'actions.causes.user': 1, 'actions.causes.pusher': 1 } )\n\n\n\n\n\n\nBuilds capped for 30 days\n\n\n\n\ndb.run.ensureIndex( { \ntimestamp\n: 1 }, { expireAfterSeconds: 2592000 } )", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/Installation/#pre-requisites", 
            "text": "Mongo DB \uf0c1  Install  mongodb  in a location accessible to your Jenkins instance.  Github Application \uf0c1  Register an  OAuth Application  with GitHub\nto generate  Client ID  and  Client Secret . \nThe  Authorization callback URL  needs to be  http:// YOUR-JENKINS-URL /dotci/finishLogin", 
            "title": "Pre-Requisites"
        }, 
        {
            "location": "/installation/Installation/#configure-master", 
            "text": "Go to  Manage Jenkins     Configure Plugins  and install  DotCi \n   plugin.  Go to  Manage Jenkins     Configure System  and fill out required information under DotCi Configuration:", 
            "title": "Configure Master"
        }, 
        {
            "location": "/installation/Installation/#docker-slave", 
            "text": "A slave that can build for docker build types, i.e.   Docker Compose , must have the\nfollowing installed in addition to required Jenkins software:   docker  docker-compose", 
            "title": "Docker Slave"
        }, 
        {
            "location": "/installation/Installation/#mongodb-indexes", 
            "text": "Builds for project   db.run.ensureIndex( {projectId: 1 } )   Builds by number   db.run.ensureIndex( {number: 1 } )   Builds by Result and Project   db.run.ensureIndex( {projectId: 1, result: 1 } )   Builds for user   db.run.ensureIndex( {className: 1, 'actions.causes.user': 1, 'actions.causes.pusher': 1 } )   Builds capped for 30 days   db.run.ensureIndex( {  timestamp : 1 }, { expireAfterSeconds: 2592000 } )", 
            "title": "MongoDB indexes"
        }, 
        {
            "location": "/development/DevelopmentSetup/", 
            "text": "Setting up local development environment\n\uf0c1\n\n\n\n\nRegister an \noauth application with github\n with the following values\n\n\nHomepage URL - http://localhost:8080/jenkins\n\n\n\n\nAuthorization callback URL - http://localhost:8080/jenkins/dotci/finishLogin\n\n\n\n\n\n\nGo to \nManage Jenkins\n \nConfigure System\n\n\n\n\nFill out required information under DotCi Configuration\n\n\n\n\n\n\n\n\nInstall mongodb\n\n\n\n\nPrepare assets:  \nnpm run build\n\n\n\n\nRun plugin:  \nmvn hpi:run\n\n\n\n\n\n\nRun webpack devserver:   \nnpm run watch\n\n\n\n\n\n\nUsing Docker:\n\uf0c1\n\n\n\n\nInstall docker: https://docs.docker.com/mac/started/\n\n\nInstall docker-compose: https://docs.docker.com/compose/install/\n\n\nRun build \ndocker-compose build\n\n\ndocker-compose run --rm plugin npm run build\n\n\nRun plugin: \ndocker-compose up plugin", 
            "title": "Development Setup"
        }, 
        {
            "location": "/development/DevelopmentSetup/#setting-up-local-development-environment", 
            "text": "Register an  oauth application with github  with the following values  Homepage URL - http://localhost:8080/jenkins   Authorization callback URL - http://localhost:8080/jenkins/dotci/finishLogin    Go to  Manage Jenkins   Configure System   Fill out required information under DotCi Configuration     Install mongodb   Prepare assets:   npm run build   Run plugin:   mvn hpi:run    Run webpack devserver:    npm run watch    Using Docker: \uf0c1   Install docker: https://docs.docker.com/mac/started/  Install docker-compose: https://docs.docker.com/compose/install/  Run build  docker-compose build  docker-compose run --rm plugin npm run build  Run plugin:  docker-compose up plugin", 
            "title": "Setting up local development environment"
        }, 
        {
            "location": "/development/Extending/", 
            "text": "DotCi defines three new \nextension points\n\n\nAdd \nnew build type\n, this would be populated in the build type dropdown.\n\uf0c1\n\n\nEg:\n\n\n\n@Extension\npublic class DockerImageBuild extends BuildType implements SubBuildRunner {\n   @Override\n    public String getDescription() {\n        return \nDocker Build\n;\n    }\n\n    @Override\n    public Result runBuild(DynamicBuild build, BuildExecutionContext buildExecutionContext, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {\n    }\n}\n\n\n\n\nAdd \nnew notifications\n is done by extending \nPostBuildNotifier\n\uf0c1\n\n\nEg: Adding a hipchat notifier in notifications section of \n.ci.yml\n\n\n  @Extension\npublic class HipchatNotifier extends PostBuildNotifier {\n    public HipchatNotifier() {\n        super(\nhipchat\n);\n    }\n    @Override\n    public boolean notify(DynamicBuild build, BuildListener listener) {\n      //notify hipchat room\n    }\n\n\n\n\nAdding a \nnew plugin\n for use through plugins section of \n.ci.yml\n is done by extending \nDotCiPluginAdapter\n\uf0c1\n\n\nEg: Adding cobertura to plugins section\n\n\n@Extension\npublic class CoberturaPluginAdapter extends DotCiPluginAdapter {\n\n    public CoberturaPluginAdapter() {\n        super(\ncobertura\n, \ntarget/site/cobertura/coverage.xml\n);\n    }\n\n    @Override\n    public boolean perform(DynamicBuild dynamicBuild, Launcher launcher, BuildListener listener) {\n        CoberturaPublisher publisher = new CoberturaPublisher(pluginInputFiles, false, false, false, false, false, false, false, null, 0);\n\n        try {\n            return publisher.perform(((AbstractBuild) dynamicBuild), launcher, listener);\n        } catch (Exception e) {\n            e.printStackTrace(listener.getLogger());\n            return false;\n        }\n    }\n\n}", 
            "title": "Extending DotCi"
        }
    ]
}